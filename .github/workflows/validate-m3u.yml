name: Validate M3U Links

on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:
  validate-links:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install requests

      - name: Validate all links in M3U files
        run: |
          import glob
          import re
          import requests
          import sys

          m3u_files = glob.glob('**/*.m3u', recursive=True)
          url_pattern = re.compile(r'^(https?://[^\s]+)$', re.MULTILINE)
          failed = False

          for m3u in m3u_files:
              print(f'Checking {m3u}...')
              with open(m3u, encoding='utf-8') as f:
                  lines = f.readlines()
              # --- M3U format validation ---
              if not lines or not lines[0].strip().startswith('#EXTM3U'):
                  print(f'::error file={m3u}::Missing or invalid #EXTM3U header')
                  failed = True
              # Check for #EXTINF before each URL
              for i, line in enumerate(lines):
                  if line.strip().startswith('http'):
                      # Look for #EXTINF in the previous 2 lines
                      if not any('#EXTINF' in lines[j] for j in range(max(0, i-2), i)):
                          print(f'::error file={m3u},line={i+1}::URL without preceding #EXTINF: {line.strip()}')
                          failed = True
              # --- Link validation ---
              content = ''.join(lines)
              urls = url_pattern.findall(content)
              for url in urls:
                  try:
                      r = requests.head(url, timeout=10, allow_redirects=True)
                      # Ignore 403 (Forbidden), treat as OK
                      if r.status_code >= 400 and r.status_code != 403:
                          print(f'::error file={m3u}::Broken link: {url} (status {r.status_code})')
                          failed = True
                      else:
                          print(f'OK: {url} (status {r.status_code})')
                  except Exception as e:
                      print(f'::error file={m3u}::Error checking {url}: {e}')
                      failed = True
          if failed:
              sys.exit(1)
        shell: python
